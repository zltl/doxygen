digraph "vhdl::parser::VhdlParser"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [label="vhdl::parser::VhdlParser",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="darkorchid3",style="dashed",label=" token_source",fontcolor="grey" ];
  Node2 [label="vhdl::parser::TokenManager",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d3/d2c/classvhdl_1_1parser_1_1_token_manager.html",tooltip="An implementation for this interface is generated by JavaCCParser."];
  Node3 -> Node1 [dir="back",color="darkorchid3",style="dashed",label=" jj_input_stream",fontcolor="grey" ];
  Node3 [label="vhdl::parser::CharStream",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d2/d98/classvhdl_1_1parser_1_1_char_stream.html",tooltip="This class describes a character stream that maintains line and column number positions of the charac..."];
  Node4 -> Node3 [dir="back",color="darkorchid3",style="dashed",label=" inputStream",fontcolor="grey" ];
  Node4 [label="ReaderStream",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d4/d89/class_reader_stream.html",tooltip=" "];
  Node5 -> Node1 [dir="back",color="darkorchid3",style="dashed",label=" head\njj_lastpos\njj_nt\njj_scanpos\ntoken",fontcolor="grey" ];
  Node5 [label="vhdl::parser::Token",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$dc/de7/classvhdl_1_1parser_1_1_token.html",tooltip="Describes the input token stream."];
  Node5 -> Node5 [dir="back",color="darkorchid3",style="dashed",label=" next\nspecialToken",fontcolor="grey" ];
  Node6 -> Node1 [dir="back",color="darkorchid3",style="dashed",label=" jj_2_rtns",fontcolor="grey" ];
  Node6 [label="vhdl::parser::JJCalls",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d8/da3/structvhdl_1_1parser_1_1_j_j_calls.html",tooltip=" "];
  Node6 -> Node6 [dir="back",color="darkorchid3",style="dashed",label=" next",fontcolor="grey" ];
  Node5 -> Node6 [dir="back",color="darkorchid3",style="dashed",label=" first",fontcolor="grey" ];
  Node7 -> Node1 [dir="back",color="darkorchid3",style="dashed",label=" errorHandler",fontcolor="grey" ];
  Node7 [label="vhdl::parser::ErrorHandler",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$df/d0f/classvhdl_1_1parser_1_1_error_handler.html",tooltip=" "];
  Node8 -> Node1 [dir="back",color="darkorchid3",style="dashed",label=" m_outlineParser",fontcolor="grey" ];
  Node8 [label="VHDLOutlineParser",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$df/d4b/class_v_h_d_l_outline_parser.html",tooltip="VHDL parser using state-based lexical scanning."];
  Node9 -> Node8 [dir="back",color="steelblue1",style="solid"];
  Node9 [label="OutlineParserInterface",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d5/d79/class_outline_parser_interface.html",tooltip="Abstract interface for outline parsers."];
  Node10 -> Node1 [dir="back",color="darkorchid3",style="dashed",label=" m_sharedState",fontcolor="grey" ];
  Node10 [label="vhdl::parser::VhdlParser\l::SharedState",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d9/da2/structvhdl_1_1parser_1_1_vhdl_parser_1_1_shared_state.html",tooltip=" "];
  Node11 -> Node10 [dir="back",color="darkorchid3",style="dashed",label=" compSpec\nconfName\ncurrName\ngenLabels\nlab",fontcolor="grey" ];
  Node11 [label="QCString",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d9/d45/class_q_c_string.html",tooltip="This is an alternative implementation of QCString."];
}
